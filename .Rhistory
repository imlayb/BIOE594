par(mfrow=c(1,3),mar=c(0,0,4.1,0))
selected<-rownames(azure_df[order(-azure_df$faceAttributes.emotion.anger),])
{
plotImage(dat[selected[1],],selected[1])
plotImage(dat[selected[2],],selected[2])
plotImage(dat[selected[3],],selected[3])
}
par(mfrow=c(1,3),mar=c(0,0,4.1,0))
selected<-rownames(azure_df[order(-azure_df$faceAttributes.emotion.sadness),])
{
plotImage(dat[selected[1],],selected[1])
plotImage(dat[selected[2],],selected[2])
plotImage(dat[selected[3],],selected[3])
}
source("Azure_classification.R")
azure_df<-data.table::fread("Azure_Results.tsv",sep = "\t",header = T,data.table = F)
azure_df$n<-as.character(azure_df$n);azure_df$faceAttributes.gender<-as.factor(azure_df$faceAttributes.gender)
rownames(azure_df)<-azure_df$n
null_images<-data.table::fread("Failed_Azure_Images.tsv",header=T,data.table=F)
meta_azure<-azure_df$n #only include images that Azure successfully classified
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df)+ggtitle("Azure Gender")+coord_flip()+theme_classic()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_classic()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_classic()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_classic()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
azure_df<-data.table::fread("Azure_Results.tsv",sep = "\t",header = T,data.table = F)
azure_df$n<-as.character(azure_df$n);azure_df$faceAttributes.gender<-as.factor(azure_df$faceAttributes.gender)
rownames(azure_df)<-azure_df$n
null_images<-data.table::fread("Failed_Azure_Images.tsv",header=T,data.table=F)
meta_azure<-meta[azure_df$n,] #only include images that Azure successfully classified
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df)+ggtitle("Azure Gender")+coord_flip()+theme_classic()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_classic()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_classic()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_classic()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
foo<-function() {p1<-qplot(sex,data=meta_TR)+ggtitle("Sex")+coord_flip()+theme_minimal()
p2<-qplot(age,data=meta_TR)+ggtitle("Age")+coord_flip()+theme_minimal()
p3<-qplot(race,data=meta_TR)+ggtitle("Race")+coord_flip()+theme_minimal()
p4<-qplot(face,data=meta_TR)+ggtitle("Face")+coord_flip()+theme_minimal()
p5<-qplot(prop,data=meta_TR)+ggtitle("Prop")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,p5,tableGrob(table(as.data.frame(meta_TR[,2:3]))),ncol=3,top="Exploratory Data Analysis")}
foo()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df,fill = rainbow(n=length(unique(azure_df$faceAttributes.gender)))+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df,fill = rainbow(n=length(unique(azure_df$faceAttributes.gender))))+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df,aes(fill = rainbow(n=length(unique(azure_df$faceAttributes.gender)))))+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
rainbow(n=length(unique(azure_df$faceAttributes.gender
)))
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df,fill = faceAttributes.gender)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df,fill = faceAttributes.gender)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()+scale_colour_brewer(palette = "Set1")+theme(legend.position="none")
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df,fill = faceAttributes.gender)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()+scale_colour_brewer(palette = "Set2")+theme(legend.position="none")
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df,fill = faceAttributes.gender)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()+scale_colour_brewer(palette = "Accent")+theme(legend.position="none")
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
cMat_Azure<-confusionMatrix(data = azure_df$faceAttributes.gender, reference = meta_azure$sex)
levels(meta_azure$sex)
azure_df<-data.table::fread("Azure_Results.tsv",sep = "\t",header = T,data.table = F)
azure_df$n<-as.character(azure_df$n);azure_df$faceAttributes.gender<-as.factor(azure_df$faceAttributes.gender)
rownames(azure_df)<-azure_df$n
null_images<-data.table::fread("Failed_Azure_Images.tsv",header=T,data.table=F)
meta_azure<-meta[azure_df$n,] #only include images that Azure successfully classified
meta_azure$sex<-as.factor(meta_azure$sex)
rownames(meta_azure)==azure_df$n
table(rownames(meta_azure)==azure_df$n)
# hard coded for gender
cMat_Azure<-confusionMatrix(data = azure_df$faceAttributes.gender, reference = meta_azure$sex)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("FDA"= 3))
# hard coded for gender
cMat_Azure<-confusionMatrix(data = azure_df$faceAttributes.gender, reference = meta_azure$sex)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("Azure"= 3))
# hard coded for gender
cMat_Azure<-confusionMatrix(data = azure_df$faceAttributes.gender, reference = meta_azure$sex)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("Azure"= 3))
perf<-rbind(FDA=c(cMat_FDA$overall["Accuracy"],cMat_FDA$byClass[c(1,2,5,6,7,8,9,10,11)]),
XGB=c(cMat_XGB$overall["Accuracy"],cMat_XGB$byClass[c(1,2,5,6,7,8,9,10,11)]),
C5.0=c(cMat_C5.0$overall["Accuracy"],cMat_C5.0$byClass[c(1,2,5,6,7,8,9,10,11)]),
GMLBoost=c(cMat_GLMB$overall["Accuracy"],cMat_GLMB$byClass[c(1,2,5,6,7,8,9,10,11)]),
Azure=c(cMat_Azure$overall["Accuracy"],cMat_Azure$byClass[c(1,2,5,6,7,8,9,10,11)]))
kable(perf,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F)
par(mfrow = c(2, 5))
par(oma = rep(2, 4), mar = c(0, 0, 3, 0))
for(i in seq(1:10)) {
plotImage(t(svd.res$v[,i]),paste0(i))
}
par(mfrow = c(2, 5))
par(mar = c(0, 0, 4.1, 0))
for(i in seq(1:10)) {
plotImage(t(svd.res$v[,i]),paste0(i))
}
knit_with_parameters('~/storage_2/misc_repos/R-EigenFaces/eigenface_notebook.Rmd')
# The models have been generated with the generateModels.R script.
load(file.path("models","sexliftcent_models.Rdata"))
# The models have been generated with the generateModels.R script.
load(file.path("models","sexliftcent_models.Rdata"))
plotVarImp<-function(model,title=NULL) {
imp<-varImp(model,scale=TRUE)$importance
imp<-cbind(imp,i=as.numeric(stringr::str_remove(rownames(imp),"X")))
imp<-imp[order(imp$i),]
i<-rep(0,128*128)
i[non_nzv]<-imp$Overall
d <- matrix(i, nrow = sqrt(length(i)))
image(
d[, nrow(d):1],
col = viridis::viridis(500),
axes = FALSE,
main=paste0("varImp ",ifelse(is.null(title),yes = "",no = title)))
}
par(mfrow = c( 1,2))
par(mar = c(0, 0, 3, 0))
{plotVarImp(fda,title="FDA")
plotVarImp(glmboost,title="GLM Boost")
plotVarImp(rf_fit,title="XGBoost Tree")
plotVarImp(c5,title="C5.0")}
library(caret)
plotVarImp<-function(model,title=NULL) {
imp<-varImp(model,scale=TRUE)$importance
imp<-cbind(imp,i=as.numeric(stringr::str_remove(rownames(imp),"X")))
imp<-imp[order(imp$i),]
i<-rep(0,128*128)
i[non_nzv]<-imp$Overall
d <- matrix(i, nrow = sqrt(length(i)))
image(
d[, nrow(d):1],
col = viridis::viridis(500),
axes = FALSE,
main=paste0("varImp ",ifelse(is.null(title),yes = "",no = title)))
}
par(mfrow = c( 1,2))
par(mar = c(0, 0, 3, 0))
{plotVarImp(fda,title="FDA")
plotVarImp(glmboost,title="GLM Boost")
plotVarImp(rf_fit,title="XGBoost Tree")
plotVarImp(c5,title="C5.0")}
sel_class<-"sex"
nzv<-nearZeroVar(dat_TR, uniqueCut = 5) # five percent of values must be unique
non_nzv<-seq(ncol(dat_TR))[-nzv]
i<-rep(255,128*128)
i[nzv]<-1
plotImage(i,"Pixels Filtered by NZV")
training<-data.frame(Class=meta_TR[[sel_class]],dat_TR[,-nzv])
test<-data.frame(Class=meta_T[[sel_class]],dat_T[,-nzv])
preProcValues <- preProcess(training, method = c("center"))
trainTransformed <- predict(preProcValues, training)
testTransformed<-predict(preProcValues, test)
plotVarImp<-function(model,title=NULL) {
imp<-varImp(model,scale=TRUE)$importance
imp<-cbind(imp,i=as.numeric(stringr::str_remove(rownames(imp),"X")))
imp<-imp[order(imp$i),]
i<-rep(0,128*128)
i[non_nzv]<-imp$Overall
d <- matrix(i, nrow = sqrt(length(i)))
image(
d[, nrow(d):1],
col = viridis::viridis(500),
axes = FALSE,
main=paste0("varImp ",ifelse(is.null(title),yes = "",no = title)))
}
par(mfrow = c( 1,2))
par(mar = c(0, 0, 3, 0))
{plotVarImp(fda,title="FDA")
plotVarImp(glmboost,title="GLM Boost")
plotVarImp(rf_fit,title="XGBoost Tree")
plotVarImp(c5,title="C5.0")}
lift_results <- data.frame(Class = testTransformed$Class)
lift_results$FDA <- predict(fda, testTransformed, type = "prob")[,"female"]
lift_results$XGB <- predict(rf_fit, testTransformed, type = "prob")[,"female"]
lift_results$C5.0 <- predict(c5, testTransformed, type = "prob")[,"female"]
lift_results$GLMB <- predict(glmboost, testTransformed, type = "prob")[,"female"]
lift_obj <- lift(Class ~ FDA + XGB + C5.0+GLMB, data = lift_results)
ggplot(lift_obj, values = 60)
p_results<-data.frame(Class=test$Class)
p_results$FDA <- predict(fda, testTransformed)
p_results$XGB <- predict(rf_fit, testTransformed)
p_results$C5.0 <- predict(c5, testTransformed)
p_results$GLMB <- predict(glmboost, testTransformed)
cMat_FDA<-confusionMatrix(data = p_results$FDA, reference = p_results$Class)
cMat_XGB<-confusionMatrix(data = p_results$XGB, reference = p_results$Class)
cMat_C5.0<-confusionMatrix(data = p_results$C5.0, reference = p_results$Class)
cMat_GLMB<-confusionMatrix(data = p_results$GLMB, reference = p_results$Class)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("FDA"= 3))
library(kable)
library(kableExtra)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("FDA"= 3))
kable(cMat_XGB$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("XGBoost"= 3))
kable(cMat_C5.0$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("C5.0"= 3))
kable(cMat_GLMB$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("GLMBoost"= 3))
load(file.path("models","prcomp.Rdata"))
pca.ind <- pca.res$x
# The models have been generated with the generateModels.R script.
load(file.path("models","sex_PCA_liftcent_models.Rdata"))
imp<-varImp(rf_fit,scale=T)
View(imp)
imp<-varImp(rf_fit,scale=T)$importance
View(imp)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(XGB,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
View(imp)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(XGB,scale=T)$importance)
View(imp)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[order(imp$PC),]
View(imp)
install.packages("gtools")
library(gtools)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
View(imp)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","c5.0","GLMB","PC")
n<-10
kable(cbind(Rank=1:n,imp[1:n,c(4,1,2,3,4)]),"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" ","FDA"=1, "XGB" = 1, "C5.0" = 1,"GMLB"=1))
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","c5.0","GLMB","PC")
n<-10
kable(cbind(Rank=1:n,imp[1:n,c(4,1,2,3,4)]),"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T) %>%
add_header_above(c(" ","PC"=1,"FDA"=1, "XGB" = 1, "C5.0" = 1,"GMLB"=1))
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","C5.0","GLMB","PC")
n<-10
kable(cbind(Rank=1:n,imp[1:n,c(4,1,2,3,4)]),"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","C5.0","GLMB","PC")
n<-10
kable(cbind(Rank=1:n,imp[1:n,c(5,1,2,3,4)]),"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","C5.0","GLMB","PC")
n<-100
kable(cbind(Rank=1:n,imp[1:n,c(5,1,2,3,4)]),"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T) %>%
scroll_box(width = "100%", height = "200px")
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","C5.0","GLMB","PC")
n<-100
kable(imp[1:n,c(5,1,2,3,4)],"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T) %>%
scroll_box(width = "100%", height = "200px")
perf<-rbind(FDA=c(cMat_FDA$overall["Accuracy"],cMat_FDA$byClass[c(1,2,5,6,7,8,9,10,11)]),
XGB=c(cMat_XGB$overall["Accuracy"],cMat_XGB$byClass[c(1,2,5,6,7,8,9,10,11)]),
C5.0=c(cMat_C5.0$overall["Accuracy"],cMat_C5.0$byClass[c(1,2,5,6,7,8,9,10,11)]),
GMLBoost=c(cMat_GLMB$overall["Accuracy"],cMat_GLMB$byClass[c(1,2,5,6,7,8,9,10,11)]))
kable(perf,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F)
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","C5.0","GLMB","Component")
n<-100
kable(imp[1:n,c(5,1,2,3,4)],"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T) %>%
scroll_box(width = "100%", height = "200px")
plotImage(t(svd.res$v[,9]),paste0(9))
# SVD calculation takes a long time
load(file.path("models","svd.Rdata"))
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","C5.0","GLMB","Component")
n<-100
kable(imp[1:n,c(5,1,2,3,4)],"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T) %>%
scroll_box(width = "100%", height = "200px")
plotImage(t(svd.res$v[,9]),paste0(9))
# The models have been generated with the generateModels.R script.
load(file.path("models","sex_PCA_liftcent_models.Rdata"))
imp<-varImp(fda,scale=T)$importance
imp<-cbind(imp,varImp(rf_fit,scale=T)$importance)
imp<-cbind(imp,varImp(c5,scale=T)$importance)
imp<-cbind(imp,varImp(glmboost,scale=T)$importance)
imp$PC<-rownames(imp)
imp<-imp[gtools::mixedsort(imp$PC),]
names(imp)<-c("FDA","XGB","C5.0","GLMB","Component")
n<-100
kable(imp[1:n,c(5,1,2,3,4)],"html",row.names = FALSE) %>% # need a better way to do this
kable_styling(bootstrap_options = "striped", full_width = T) %>%
scroll_box(width = "100%", height = "200px")
plotImage(t(svd.res$v[,9]),paste0(9))
lift_results <- data.frame(Class = testTransformed$Class)
lift_results$FDA <- predict(fda, testTransformed, type = "prob")[,"female"]
##
sel_class<-"sex"
training<-data.frame(Class=meta_TR[[sel_class]],pca.res$x) ### Only thing needed to change selected class
##
preProcValues <- preProcess(training, method = c("center","scale"))
trainTransformed <- predict(preProcValues, training)
test_PCA<- predict(pca.res, newdata = dat_T[,-nzv])
test_PCA<-data.frame(Class=meta_T[[sel_class]],test_PCA)
testTransformed<-predict(preProcValues, test_PCA)
lift_results <- data.frame(Class = testTransformed$Class)
lift_results$FDA <- predict(fda, testTransformed, type = "prob")[,"female"]
lift_results$XGB <- predict(rf_fit, testTransformed, type = "prob")[,"female"]
lift_results$C5.0 <- predict(c5, testTransformed, type = "prob")[,"female"]
lift_results$GLMB <- predict(glmboost, testTransformed, type = "prob")[,"female"]
lift_obj <- lift(Class ~ FDA + XGB + C5.0+GLMB, data = lift_results)
ggplot(lift_obj, values = 60)+ggtitle("")
p_results<-data.frame(Class=testTransformed$Class)
p_results$FDA <- predict(fda, testTransformed)
p_results$XGB <- predict(rf_fit, testTransformed)
p_results$C5.0 <- predict(c5, testTransformed)
p_results$GLMB <- predict(glmboost, testTransformed)
cMat_FDA<-confusionMatrix(data = p_results$FDA, reference = p_results$Class)
cMat_XGB<-confusionMatrix(data = p_results$XGB, reference = p_results$Class)
cMat_C5.0<-confusionMatrix(data = p_results$C5.0, reference = p_results$Class)
cMat_GLMB<-confusionMatrix(data = p_results$GLMB, reference = p_results$Class)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("FDA"= 3))
kable(cMat_XGB$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("XGBoost"= 3))
kable(cMat_C5.0$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("C5.0"= 3))
kable(cMat_GLMB$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("GLMBoost"= 3))
perf<-rbind(FDA=c(cMat_FDA$overall["Accuracy"],cMat_FDA$byClass[c(1,2,5,6,7,8,9,10,11)]),
XGB=c(cMat_XGB$overall["Accuracy"],cMat_XGB$byClass[c(1,2,5,6,7,8,9,10,11)]),
C5.0=c(cMat_C5.0$overall["Accuracy"],cMat_C5.0$byClass[c(1,2,5,6,7,8,9,10,11)]),
GMLBoost=c(cMat_GLMB$overall["Accuracy"],cMat_GLMB$byClass[c(1,2,5,6,7,8,9,10,11)]))
kable(perf,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F)
azure_df<-data.table::fread("Azure_Results.tsv",sep = "\t",header = T,data.table = F)
azure_df$n<-as.character(azure_df$n);azure_df$faceAttributes.gender<-as.factor(azure_df$faceAttributes.gender)
rownames(azure_df)<-azure_df$n
null_images<-data.table::fread("Failed_Azure_Images.tsv",header=T,data.table=F)
meta_azure<-meta[azure_df$n,] #only include images that Azure successfully classified
meta_azure$sex<-as.factor(meta_azure$sex)
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
library(gridExtra)
#tableGrob(table(as.data.frame(meta_TR[,2:3])))
foo<-function() {p1<-qplot(faceAttributes.gender,data=azure_df)+ggtitle("Azure Gender")+coord_flip()+theme_minimal()
p2<-qplot(faceAttributes.age,data=azure_df)+ggtitle("Azure Age")+theme_minimal()
p3<-qplot(sex,data=meta_azure)+ggtitle("Original Gender")+coord_flip()+theme_minimal()
p4<-qplot(age,data=meta_azure)+ggtitle("Original Age")+coord_flip()+theme_minimal()
grid.arrange(p1,p2,p3,p4,ncol=2,top="Azure vs. Original Annotation: Gender & Age")}
foo()
# hard coded for gender
cMat_Azure<-confusionMatrix(data = azure_df$faceAttributes.gender, reference = meta_azure$sex)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("Azure"= 3))
perf<-rbind(FDA=c(cMat_FDA$overall["Accuracy"],cMat_FDA$byClass[c(1,2,5,6,7,8,9,10,11)]),
XGB=c(cMat_XGB$overall["Accuracy"],cMat_XGB$byClass[c(1,2,5,6,7,8,9,10,11)]),
C5.0=c(cMat_C5.0$overall["Accuracy"],cMat_C5.0$byClass[c(1,2,5,6,7,8,9,10,11)]),
GMLBoost=c(cMat_GLMB$overall["Accuracy"],cMat_GLMB$byClass[c(1,2,5,6,7,8,9,10,11)]),
Azure=c(cMat_Azure$overall["Accuracy"],cMat_Azure$byClass[c(1,2,5,6,7,8,9,10,11)]))
kable(perf,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F)
# hard coded for gender
cMat_Azure<-confusionMatrix(data = azure_df$faceAttributes.gender, reference = meta_azure$sex)
kable(cMat_Azure$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("Azure"= 3))
perf<-rbind(FDA=c(cMat_FDA$overall["Accuracy"],cMat_FDA$byClass[c(1,2,5,6,7,8,9,10,11)]),
XGB=c(cMat_XGB$overall["Accuracy"],cMat_XGB$byClass[c(1,2,5,6,7,8,9,10,11)]),
C5.0=c(cMat_C5.0$overall["Accuracy"],cMat_C5.0$byClass[c(1,2,5,6,7,8,9,10,11)]),
GMLBoost=c(cMat_GLMB$overall["Accuracy"],cMat_GLMB$byClass[c(1,2,5,6,7,8,9,10,11)]),
Azure=c(cMat_Azure$overall["Accuracy"],cMat_Azure$byClass[c(1,2,5,6,7,8,9,10,11)]))
kable(perf,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F)
nrow(null_images)
nrow(azure_df)
90+3879
1347+2171+45
3563/3969
