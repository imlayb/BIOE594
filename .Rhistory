source("eigenfaces.R")
library(plyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(gridExtra)
library(factoextra)
library(caret)
source("eigenfaces.R")
dat<-importFaceMatrix()
#This code may be run multiple times to see the huge diversity of images in the data.
par(mfrow=c(1,3))
selected<-sample(rownames(dat),3)
{plotImage(dat[selected[1],],selected[1])
plotImage(dat[selected[2],],selected[2])
plotImage(dat[selected[3],],selected[3])}
meta_TR<-importMetaMatrix("faces/faceDR")
meta_T<-importMetaMatrix("faces/faceDS")
meta_TR<-meta_TR[meta_TR$n %in% rownames(dat),] # Remove any examples from metadata that are not in the data.
meta_T<-meta_T[meta_T$n %in% rownames(dat),]
dat_TR<-dat[meta_TR$n,]
dat_T<-dat[meta_T$n,]
rm(dat)
foo<-function() {p1<-qplot(sex,data=meta_TR)+ggtitle("Sex")+coord_flip()+theme_classic()
p2<-qplot(age,data=meta_TR)+ggtitle("Age")+coord_flip()+theme_classic()
p3<-qplot(race,data=meta_TR)+ggtitle("Race")+coord_flip()+theme_classic()
p4<-qplot(face,data=meta_TR)+ggtitle("Face")+coord_flip()+theme_classic()
p5<-qplot(prop,data=meta_TR)+ggtitle("Prop")+coord_flip()+theme_classic()
grid.arrange(p1,p2,p3,p4,p5,tableGrob(count(meta_TR[,2:3]),rows=NULL),ncol=3,top="Exploratory Data Analysis")}
foo()
c_means = colMeans(dat_TR)
c_dat_TR<-scale(dat_TR, center = 1 * c_means, scale=FALSE)
par(mfrow=c(1,3))
foo<-function() {
plotImage(c_means,"Average Face")
plotImage(colMeans(dat_TR[meta_TR[meta_TR$sex=="female",]$n,]),"Average Female Face")
plotImage(colMeans(dat_TR[meta_TR[meta_TR$sex=="male",]$n,]),"Average Male Face")}
foo()
# SVD calculation takes a long time
load(file.path("models","svd.Rdata"))
foo2<-function(d) {
x<-data.frame(ith_Eig=1:d,
Proportion = round(svd.res$d^2/sum(svd.res$d^2),3)[1:d],
Cumulative = round(cumsum(svd.res$d^2)/sum(svd.res$d^2),3)[1:d])
return(x)
}
x<-foo2(100)
p1<-ggplot(data=x[1:5,])+
geom_line(aes(x=ith_Eig,y=Proportion),linetype='dashed')+
geom_point(aes(x=ith_Eig,y=Proportion))+
geom_label(aes(x=ith_Eig,y=Proportion,label=Proportion),nudge_x = .5,nudge_y = .005)+
theme_classic()+ggtitle("Proportion of Variance Explained")
p2<-tableGrob(x[1:20,c(2,3)])
grid.arrange(p1,p2,ncol=2)
par(mfrow = c(2, 5))
par(oma = rep(2, 4), mar = c(0, 0, 3, 0))
for(i in seq(1:10)) {
plotImage(t(svd.res$v[,i]),paste0(i))
}
S<-diag(svd.res$d)
Ss<-S[,1:params$n_features]
V<-svd.res$v[,1:params$n_features]
restr<-svd.res$u %*% Ss %*% t(V) # U * S * V^T
restr <- scale(restr, center = -1 * c_means, scale=FALSE)
par(mfrow = c( 2,4))
par(mar = c(0, 0, 3, 0
))
for(i in sample(seq(nrow(dat_TR)),8)) {
plotImage(dat_TR[i,],meta_TR[i,]$n)
plotImage(restr[i,],paste0(meta_TR[i,]$n,"R"))
}
rm(restr)
sel_class<-"sex"
nzv<-nearZeroVar(dat_TR, uniqueCut = 5) # five percent of values must be unique
non_nzv<-seq(ncol(dat_TR))[-nzv]
i<-rep(255,128*128)
i[nzv]<-1
plotImage(i,"Pixels Filtered by NZV")
training<-data.frame(Class=meta_TR[[sel_class]],dat_TR[,-nzv])
test<-data.frame(Class=meta_T[[sel_class]],dat_T[,-nzv])
preProcValues <- preProcess(training, method = c("center"))
trainTransformed <- predict(preProcValues, training)
testTransformed<-predict(preProcValues, test)
# The models have been generated with the generateModels.R script.
load(file.path("models","sexliftcent_models.Rdata"))
plotVarImp<-function(model,title=NULL) {
imp<-varImp(model,scale=TRUE)$importance
imp<-cbind(imp,i=as.numeric(stringr::str_remove(rownames(imp),"X")))
imp<-imp[order(imp$i),]
i<-rep(0,128*128)
i[non_nzv]<-imp$Overall
d <- matrix(i, nrow = sqrt(length(i)))
image(
d[, nrow(d):1],
col = viridis::viridis(500),
axes = FALSE,
main=paste0("varImp ",ifelse(is.null(title),yes = "",no = title)))
}
par(mfrow = c( 1,2))
par(mar = c(0, 0, 3, 0))
{plotVarImp(fda,title="FDA")
plotVarImp(glmboost,title="GLM Boost")
plotVarImp(rf_fit,title="XGBoost Tree")
plotVarImp(c5,title="C5.0")}
lift_results <- data.frame(Class = testTransformed$Class)
lift_results$FDA <- predict(fda, testTransformed, type = "prob")[,"female"]
lift_results$XGB <- predict(rf_fit, testTransformed, type = "prob")[,"female"]
lift_results$C5.0 <- predict(c5, testTransformed, type = "prob")[,"female"]
lift_results$GLMB <- predict(glmboost, testTransformed, type = "prob")[,"female"]
lift_obj <- lift(Class ~ FDA + XGB + C5.0+GLMB, data = lift_results)
ggplot(lift_obj, values = 60)
p_results<-data.frame(Class=test$Class)
p_results$FDA <- predict(fda, testTransformed)
p_results$XGB <- predict(rf_fit, testTransformed)
p_results$C5.0 <- predict(c5, testTransformed)
p_results$GLMB <- predict(glmboost, testTransformed)
cMat_FDA<-confusionMatrix(data = p_results$FDA, reference = p_results$Class)
cMat_XGB<-confusionMatrix(data = p_results$XGB, reference = p_results$Class)
cMat_C5.0<-confusionMatrix(data = p_results$C5.0, reference = p_results$Class)
cMat_GLMB<-confusionMatrix(data = p_results$GLMB, reference = p_results$Class)
kable(cMat_FDA$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("FDA"= 3))
kable(cMat_XGB$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("XGBoost"= 3))
kable(cMat_C5.0$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("C5.0"= 3))
kable(cMat_GLMB$table,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F,position="float_left") %>%
add_header_above(c("Pred.","Ref."= 2)) %>%
add_header_above(c("GLMBoost"= 3))
perf<-rbind(FDA=c(cMat_FDA$overall["Accuracy"],cMat_FDA$byClass[c(1,2,5,6,7,8,9,10,11)]),
XBG=c(cMat_XGB$overall["Accuracy"],cMat_XGB$byClass[c(1,2,5,6,7,8,9,10,11)]),
C5.0=c(cMat_C5.0$overall["Accuracy"],cMat_C5.0$byClass[c(1,2,5,6,7,8,9,10,11)]),
GMLBoost=c(cMat_GLMB$overall["Accuracy"],cMat_GLMB$byClass[c(1,2,5,6,7,8,9,10,11)]))
kable(perf,"html") %>%
kable_styling(bootstrap_options = "striped", full_width = F)
meta<-cbind(meta_TR,meta_T)
meta<-rbind(meta_TR,meta_T)
source("eigenfaces.R")
dat<-importFaceMatrix()
View(dat)
dimnames(dat)[[1]]
dimnames(dat)[[2]]
dimnames(dat)[[1]]
rownames(dat)
meta_TR<-importMetaMatrix("faces/faceDR")
meta_T<-importMetaMatrix("faces/faceDS")
meta_TR<-meta_TR[meta_TR$n %in% rownames(dat),] # Remove any examples from metadata that are not in the data.
meta_T<-meta_T[meta_T$n %in% rownames(dat),]
meta<-rbind(meta_TR,meta_T)
rownames(meta)<-meta$n
meta<-meta[rownames(dat),]
#rm(dat)
View(meta)
trainIndex <- createDataPartition(meta$sex, p = .8,
list = FALSE,
times = 1)
trainIndex <- createDataPartition(meta$sex, p = .8,
list = FALSE,
times = 1)
meta_TR<-meta[trainIndex,]
meta_T<-meta[-trainIndex,]
View(x)
trainIndex <- createDataPartition(meta$sex, p = .8,
list = FALSE,
times = 1)
meta_TR<-meta[trainIndex,]
meta_T<-meta[-trainIndex,]
dat_TR<-dat[trainIndex,]
dat_T<-dat[-trainIndex,]
set.seed(1234)
trainIndex <- createDataPartition(meta$sex, p = .8,
list = FALSE,
times = 1)
meta_TR<-meta[trainIndex,]
meta_T<-meta[-trainIndex,]
dat_TR<-dat[trainIndex,]
dat_T<-dat[-trainIndex,]
foo<-function() {p1<-qplot(sex,data=meta_TR)+ggtitle("Sex")+coord_flip()+theme_classic()
p2<-qplot(age,data=meta_TR)+ggtitle("Age")+coord_flip()+theme_classic()
p3<-qplot(race,data=meta_TR)+ggtitle("Race")+coord_flip()+theme_classic()
p4<-qplot(face,data=meta_TR)+ggtitle("Face")+coord_flip()+theme_classic()
p5<-qplot(prop,data=meta_TR)+ggtitle("Prop")+coord_flip()+theme_classic()
grid.arrange(p1,p2,p3,p4,p5,tableGrob(count(meta_TR[,2:3]),rows=NULL),ncol=3,top="Exploratory Data Analysis")}
foo()
foo2<-function(d) {
x<-data.frame(ith_Eig=1:d,
Proportion = round(svd.res$d^2/sum(svd.res$d^2),3)[1:d],
Cumulative = round(cumsum(svd.res$d^2)/sum(svd.res$d^2),3)[1:d])
return(x)
}
x<-foo2(100)
p1<-ggplot(data=x[1:5,])+
geom_line(aes(x=ith_Eig,y=Proportion),linetype='dashed')+
geom_point(aes(x=ith_Eig,y=Proportion))+
geom_label(aes(x=ith_Eig,y=Proportion,label=Proportion),nudge_x = .5,nudge_y = .005)+
theme_classic()+ggtitle("Proportion of Variance Explained")
p2<-tableGrob(x[1:20,c(2,3)])
grid.arrange(p1,p2,ncol=2)
source("eigenfaces.R")
library(plyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(gridExtra)
library(factoextra)
library(caret)
source("eigenfaces.R")
dat<-importFaceMatrix()
#This code may be run multiple times to see the huge diversity of images in the data.
par(mfrow=c(1,3))
selected<-sample(rownames(dat),3)
{plotImage(dat[selected[1],],selected[1])
plotImage(dat[selected[2],],selected[2])
plotImage(dat[selected[3],],selected[3])}
meta_TR<-importMetaMatrix("faces/faceDR")
meta_T<-importMetaMatrix("faces/faceDS")
meta_TR<-meta_TR[meta_TR$n %in% rownames(dat),] # Remove any examples from metadata that are not in the data.
meta_T<-meta_T[meta_T$n %in% rownames(dat),]
meta<-rbind(meta_TR,meta_T)
rownames(meta)<-meta$n
meta<-meta[rownames(dat),]
#rm(dat)
set.seed(1234)
trainIndex <- createDataPartition(meta$sex, p = .8,
list = FALSE,
times = 1)
meta_TR<-meta[trainIndex,]
meta_T<-meta[-trainIndex,]
dat_TR<-dat[trainIndex,]
dat_T<-dat[-trainIndex,]
foo<-function() {p1<-qplot(sex,data=meta_TR)+ggtitle("Sex")+coord_flip()+theme_classic()
p2<-qplot(age,data=meta_TR)+ggtitle("Age")+coord_flip()+theme_classic()
p3<-qplot(race,data=meta_TR)+ggtitle("Race")+coord_flip()+theme_classic()
p4<-qplot(face,data=meta_TR)+ggtitle("Face")+coord_flip()+theme_classic()
p5<-qplot(prop,data=meta_TR)+ggtitle("Prop")+coord_flip()+theme_classic()
grid.arrange(p1,p2,p3,p4,p5,tableGrob(count(meta_TR[,2:3]),rows=NULL),ncol=3,top="Exploratory Data Analysis")}
foo()
c_means = colMeans(dat_TR)
c_dat_TR<-scale(dat_TR, center = 1 * c_means, scale=FALSE)
par(mfrow=c(1,3))
foo<-function() {
plotImage(c_means,"Average Face")
plotImage(colMeans(dat_TR[meta_TR[meta_TR$sex=="female",]$n,]),"Average Female Face")
plotImage(colMeans(dat_TR[meta_TR[meta_TR$sex=="male",]$n,]),"Average Male Face")}
foo()
# SVD calculation takes a long time
load(file.path("models","svd.Rdata"))
foo2<-function(d) {
x<-data.frame(ith_Eig=1:d,
Proportion = round(svd.res$d^2/sum(svd.res$d^2),3)[1:d],
Cumulative = round(cumsum(svd.res$d^2)/sum(svd.res$d^2),3)[1:d])
return(x)
}
x<-foo2(100)
p1<-ggplot(data=x[1:5,])+
geom_line(aes(x=ith_Eig,y=Proportion),linetype='dashed')+
geom_point(aes(x=ith_Eig,y=Proportion))+
geom_label(aes(x=ith_Eig,y=Proportion,label=Proportion),nudge_x = .5,nudge_y = .005)+
theme_classic()+ggtitle("Proportion of Variance Explained")
p2<-tableGrob(x[1:20,c(2,3)])
grid.arrange(p1,p2,ncol=2)
par(mfrow = c(2, 5))
par(oma = rep(2, 4), mar = c(0, 0, 3, 0))
for(i in seq(1:10)) {
plotImage(t(svd.res$v[,i]),paste0(i))
}
S<-diag(svd.res$d)
Ss<-S[,1:params$n_features]
V<-svd.res$v[,1:params$n_features]
restr<-svd.res$u %*% Ss %*% t(V) # U * S * V^T
restr <- scale(restr, center = -1 * c_means, scale=FALSE)
par(mfrow = c( 2,4))
par(mar = c(0, 0, 3, 0
))
for(i in sample(seq(nrow(dat_TR)),8)) {
plotImage(dat_TR[i,],meta_TR[i,]$n)
plotImage(restr[i,],paste0(meta_TR[i,]$n,"R"))
}
source('~/storage_2/misc_repos/CS418/quiz6/quiz6.R', echo=TRUE)
View(item_item_cor)
View(ratings)
View(mean_adjusted_ratings)
source('~/storage_2/misc_repos/CS418/quiz6/quiz6.R', echo=TRUE)
source('~/storage_2/misc_repos/CS418/quiz6/quiz6.R', echo=TRUE)
View(mean_adjusted_ratings)
is.na(mean_adjusted_ratings)
mean_adjusted_ratings[is.na(mean_adjusted_ratings)]
mean_adjusted_ratings[is.na(mean_adjusted_ratings)]
mean_adjusted_ratings[is.na(mean_adjusted_ratings)]<-0
mean_adjusted_ratings
source('~/storage_2/misc_repos/CS418/quiz6/quiz6.R', echo=TRUE)
source('~/storage_2/misc_repos/CS418/quiz6/quiz6.R', echo=TRUE)
View(item_item_cor)
